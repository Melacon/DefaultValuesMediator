
#ifndef _H_y_CoreModel_CoreNetworkModule_ObjectClasses
#define _H_y_CoreModel_CoreNetworkModule_ObjectClasses
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.5-5

    Yuma SIL header
    module CoreModel-CoreNetworkModule-ObjectClasses
    revision 2016-08-11
    namespace uri:onf:CoreModel-CoreNetworkModule-ObjectClasses
    organization ONF (Open Networking Foundation) Open Transport Working Group - Wireless Transport Project

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_CoreModel_CoreNetworkModule_ObjectClasses_M_CoreModel_CoreNetworkModule_ObjectClasses (const xmlChar *)"CoreModel-CoreNetworkModule-ObjectClasses"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_R_CoreModel_CoreNetworkModule_ObjectClasses (const xmlChar *)"2016-08-11"

#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_ForwardingConstruct (const xmlChar *)"ForwardingConstruct"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_NetworkElement (const xmlChar *)"NetworkElement"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__clientLtpRefList (const xmlChar *)"_clientLtpRefList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__connectedLtpRef (const xmlChar *)"_connectedLtpRef"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__fcPortList (const xmlChar *)"_fcPortList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__fcRefList (const xmlChar *)"_fcRefList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__fcSwitchList (const xmlChar *)"_fcSwitchList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__fdRefList (const xmlChar *)"_fdRefList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__lowerLevelFcRefList (const xmlChar *)"_lowerLevelFcRefList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__lowerLevelFdRefList (const xmlChar *)"_lowerLevelFdRefList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__lpList (const xmlChar *)"_lpList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__ltpRefList (const xmlChar *)"_ltpRefList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__peerLtpRef (const xmlChar *)"_peerLtpRef"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__selectedFcPortRefList (const xmlChar *)"_selectedFcPortRefList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N__serverLtpRefList (const xmlChar *)"_serverLtpRefList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_administrativeControl (const xmlChar *)"administrativeControl"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_administrativeState (const xmlChar *)"administrativeState"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_configuredClientCapacity (const xmlChar *)"configuredClientCapacity"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_extensionList (const xmlChar *)"extensionList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_fcPortDirection (const xmlChar *)"fcPortDirection"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_forwardingDirection (const xmlChar *)"forwardingDirection"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_holdOffTime (const xmlChar *)"holdOffTime"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_labelList (const xmlChar *)"labelList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_layerProtocolName (const xmlChar *)"layerProtocolName"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_layerProtocolNameList (const xmlChar *)"layerProtocolNameList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_lifecycleState (const xmlChar *)"lifecycleState"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_localIdList (const xmlChar *)"localIdList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_lpDirection (const xmlChar *)"lpDirection"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_ltpDirection (const xmlChar *)"ltpDirection"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_nameList (const xmlChar *)"nameList"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_operType (const xmlChar *)"operType"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_operationalState (const xmlChar *)"operationalState"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_physicalPortReference (const xmlChar *)"physicalPortReference"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_protType (const xmlChar *)"protType"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_role (const xmlChar *)"role"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_terminationState (const xmlChar *)"terminationState"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_uuid (const xmlChar *)"uuid"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_value (const xmlChar *)"value"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_valueName (const xmlChar *)"valueName"
#define y_CoreModel_CoreNetworkModule_ObjectClasses_N_waitToRestoreTime (const xmlChar *)"waitToRestoreTime"
/********************************************************************
* FUNCTION y_CoreModel_CoreNetworkModule_ObjectClasses_init
* 
* initialize the CoreModel-CoreNetworkModule-ObjectClasses server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_CoreModel_CoreNetworkModule_ObjectClasses_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_CoreModel_CoreNetworkModule_ObjectClasses_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_CoreModel_CoreNetworkModule_ObjectClasses_init2 (void);

/********************************************************************
* FUNCTION y_CoreModel_CoreNetworkModule_ObjectClasses_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_CoreModel_CoreNetworkModule_ObjectClasses_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif